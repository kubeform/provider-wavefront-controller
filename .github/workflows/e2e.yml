name: e2e

on: [pull_request]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v1
        with:
          go-version: 1.17
        id: go

      - uses: actions/checkout@v1

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Prepare host
        run: |
          sudo apt-get -qq update || true
          sudo apt-get install -y bzr
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.1/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Run checks
        run: |
          make ci

      - name: Login Docker
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          USERNAME: 1gtm
        run: |
          docker login --username ${USERNAME} --password ${DOCKER_TOKEN}

      - name: Build
        env:
          REGISTRY: kubedbci
        run: |
          make push

  kubernetes:
    name: Kubernetes
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        k8s: [v1.21.1]
    steps:
      - uses: actions/checkout@v1

      - name: Set up Go 1.17
        uses: actions/setup-go@v1
        with:
          go-version: 1.17
        id: go

      # https://github.com/engineerd/setup-kind/issues/41
      - name: Cleanup
        run: |
          kind delete cluster || true
          rm -rf ../installer

      - name: Create Kubernetes ${{ matrix.k8s }} cluster
        id: kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: v0.11.1
          config: hack/kubernetes/kind.yaml
          image: kindest/node:${{ matrix.k8s }}

      - name: Prepare cluster for testing
        id: local-path
        env:
          USERNAME: 1gtm
          REGISTRY_SECRET: regcred
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "waiting for nodes to be ready ..."
          kubectl wait --for=condition=Ready nodes --all --timeout=5m
          kubectl get nodes
          kubectl wait --for=condition=Ready pods -n kube-system --all --timeout=10m
          kubectl get pods -n kube-system
          echo
          echo "install helm 3"
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Check out installer
        run: |
          cd .. || exit
          git clone https://github.com/kubeform/installer.git
          cd installer
          git checkout master

      - name: Get Kubeform License
        env:
          BYTEBUILDERS_LICENSE_TOKEN: ${{ secrets.BYTEBUILDERS_LICENSE_TOKEN }}
        run: |
          CLUSTER_UID=$(kubectl get ns kube-system -o=jsonpath='{.metadata.uid}')
          curl -X POST -fsSL -o license-file.txt \
              -d "name=1gtm&email=1gtm@appscode.com&product=kubeform-enterprise&cluster=$CLUSTER_UID&tos=true&token=$BYTEBUILDERS_LICENSE_TOKEN" \
              https://license-issuer.appscode.com/issue-license

      - name: Install controller
        env:
          REGISTRY: kubedbci
        run: |
          export LICENSE_FILE=$(pwd)/license-file.txt
          make chart-dependencies install

      - name: Run e2e tests
        env:
          REGISTRY: kubedbci
          TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
          GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
        run: |
          echo "preparing test credentials"
          mkdir -p hack/config
          echo -n "$TEST_CREDENTIALS" > hack/config/.env
          echo >> hack/config/.env
          echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
          make e2e-tests GINKGO_ARGS="--flakeAttempts=2" || (kubectl describe deployment -n kubeform; kubectl logs -n kubeform -l app.kubernetes.io/name=kubeform-provider; exit 1;)
